/*
 * This file is generated by jOOQ.
 */
package com.abchina.tt.generated.tables;


import com.abchina.tt.generated.Indexes;
import com.abchina.tt.generated.Keys;
import com.abchina.tt.generated.tables.records.HouseRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class House extends TableImpl<HouseRecord> {

    private static final long serialVersionUID = -777002678;

    /**
     * The reference instance of <code>house.HOUSE</code>
     */
    public static final House HOUSE_ = new House();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseRecord> getRecordType() {
        return HouseRecord.class;
    }

    /**
     * The column <code>house.HOUSE.ID</code>.
     */
    public final TableField<HouseRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>house.HOUSE.ADDRESS</code>.
     */
    public final TableField<HouseRecord, String> ADDRESS = createField("ADDRESS", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>house.HOUSE.PRICE</code>.
     */
    public final TableField<HouseRecord, BigDecimal> PRICE = createField("PRICE", org.jooq.impl.SQLDataType.DECIMAL(18, 2), this, "");

    /**
     * The column <code>house.HOUSE.AREA</code>.
     */
    public final TableField<HouseRecord, BigDecimal> AREA = createField("AREA", org.jooq.impl.SQLDataType.DECIMAL(18, 2), this, "");

    /**
     * The column <code>house.HOUSE.TYP</code>.
     */
    public final TableField<HouseRecord, String> TYP = createField("TYP", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>house.HOUSE.LOCATION</code>.
     */
    public final TableField<HouseRecord, String> LOCATION = createField("LOCATION", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>house.HOUSE</code> table reference
     */
    public House() {
        this(DSL.name("HOUSE"), null);
    }

    /**
     * Create an aliased <code>house.HOUSE</code> table reference
     */
    public House(String alias) {
        this(DSL.name(alias), HOUSE_);
    }

    /**
     * Create an aliased <code>house.HOUSE</code> table reference
     */
    public House(Name alias) {
        this(alias, HOUSE_);
    }

    private House(Name alias, Table<HouseRecord> aliased) {
        this(alias, aliased, null);
    }

    private House(Name alias, Table<HouseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> House(Table<O> child, ForeignKey<O, HouseRecord> key) {
        super(child, key, HOUSE_);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return com.abchina.tt.generated.House.HOUSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOUSE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HouseRecord, Long> getIdentity() {
        return Keys.IDENTITY_HOUSE_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HouseRecord> getPrimaryKey() {
        return Keys.KEY_HOUSE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HouseRecord>> getKeys() {
        return Arrays.<UniqueKey<HouseRecord>>asList(Keys.KEY_HOUSE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public House as(String alias) {
        return new House(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public House as(Name alias) {
        return new House(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(String name) {
        return new House(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Name name) {
        return new House(name, null);
    }
}
